# Configuration file for RtDB items.
# - It is composed of 3 sections: agents, items, and schemas.
#   - The agents section is a comma-separated list of agent's ids.
#   - The items section is a list of items. 
#     - An item is composed of an id, a datatype, the headerfile where
#       the datatype is declared, and a period.
#     - The item format is described bellow.
#   - The schema section is a newline- or semicolon-separated list of schemas. 
#     - A schema is an arrangement of items, 
#       each one labelled as either shared or local.
#     - A schema must also be assigned to 1 or more agents.
#     - The schema format is described below.
# - Everything from # to end of line is discarded.
# - Empty lines are also discarded.
# - In the comments bellow square brackets define an optional component.

# Agent declaration section
#   it is a comma-separated list of agent's ids
# 
# AGENTS = «id» [, «id» , ...] [;]
#
AGENTS = BASE_STATION, TURTLE_1, TURTLE_2, TURTLE_3, TURTLE_4, TURTLE_5, TURTLE_6, TURTLE_7, TURTLE_8, JETSON_1, JETSON_2, COACH_1, COACH_2, COACH_3, COACH_4, COACH_5, COACH_6, COACH_7, COACH_8, COACH_9, COACH_10, COACH_11, COACH_12, COACH_13, COACH_14, COACH_15, COACH_16, COACH_17, COACH_18, COACH_19, COACH_20;

# Item declaration section
# 
# ITEM «id» { datatype = «id»; [headerfile = «filename»]; 
#	[period = «number»]; }
# headerfile defaults to «datatype» plus ".h". For instance if datatype = abc,
#   then headerfile defaults to abc.h
# period defaults to 1
#
ITEM MOTION_SHARED { datatype = MotionShared; headerfile = MotionShared.h; }

ITEM VISION_LOCAL { datatype = VisionLocal; headerfile = VisionLocal.h; }

ITEM VISION_SHARED { datatype = VisionShared; headerfile = VisionShared.h; }

ITEM WORLDMODEL_LOCAL { datatype = WorldmodelLocal; headerfile = WorldmodelLocal.h; }

ITEM BALL_SHARED { datatype = BallShared; headerfile = BallShared.h; }

ITEM COACH_FOR1 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM COACH_FOR2 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM COACH_FOR3 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM COACH_FOR4 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM COACH_FOR5 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM COACH_FOR6 { datatype = RefboxCommands; headerfile = RefboxCommands.h; }

ITEM MANUALMODE_LOCAL { datatype = ManualMode; headerfile = ManualMode.h; }

ITEM WORLDMODEL_SHARED { datatype = WorldmodelShared; headerfile = WorldmodelShared.h; }

ITEM APPMAN_SHARED { datatype = AppmanShared; headerfile = AppmanShared.h; }

ITEM MOTION_LOCAL { datatype = MotionLocal; headerfile = MotionLocal.h; }

ITEM TRC2SIM_LOCAL { datatype = TRC2SimLocal; headerfile = TRC2SimLocal.h; }

ITEM SIM2TURTLE { datatype = Sim2Turtle; headerfile = Sim2Turtle.h; }

ITEM TURTLE2SIM { datatype = Turtle2Sim; headerfile = Turtle2Sim.h; }

ITEM KINECT_SHARED { datatype = KinectShared; headerfile = KinectShared.h; }

ITEM TURTLE2KINECT { datatype = Turtle2Kinect; headerfile = Turtle2Kinect.h; }

ITEM SIMLINK { datatype = SimLink; headerfile = SimLink.h; }

# NETWORK definition section
#
# NETWORK «id» { [shared = «id» [ , «id», ...] ; ] 
#
NETWORK WIFI
{
    shared = COACH_FOR1, COACH_FOR2, COACH_FOR3, COACH_FOR4, COACH_FOR5, COACH_FOR6;
    shared = MOTION_SHARED, VISION_SHARED, APPMAN_SHARED, WORLDMODEL_SHARED, BALL_SHARED;
}

NETWORK KINECT
{
    shared = TURTLE2KINECT, KINECT_SHARED;
}

NETWORK SIMLINK
{
    shared = SIMLINK;
}

# SCHEMA definition section
#
# SCHEMA «id» { [shared = «id» [ , «id», ...] ; ] 
#    [local = «id» [, «id», ...] ; ]
#
SCHEMA BaseStation
{
    shared = COACH_FOR1, COACH_FOR2, COACH_FOR3, COACH_FOR4, COACH_FOR5, COACH_FOR6, SIM2TURTLE, SIMLINK;
    local =  TRC2SIM_LOCAL, MANUALMODE_LOCAL;
}

SCHEMA Turtle
{
    shared = MOTION_SHARED, VISION_SHARED, APPMAN_SHARED, WORLDMODEL_SHARED,TURTLE2SIM,BALL_SHARED,TURTLE2KINECT;
    local = VISION_LOCAL, WORLDMODEL_LOCAL, MOTION_LOCAL;
}

SCHEMA KinectBoard
{
    shared = KINECT_SHARED;
}

# ASSIGNMENT definition section
#
# ASSIGNMENT { schema = «id»; agents = «id», ... ; }
#
ASSIGNMENT { schema = BaseStation; agents = BASE_STATION, COACH_1, COACH_2, COACH_3, COACH_4, COACH_5, COACH_6, COACH_7, COACH_8, COACH_9, COACH_10, COACH_11, COACH_12, COACH_13, COACH_14, COACH_15, COACH_16, COACH_17, COACH_18, COACH_19, COACH_20; }
ASSIGNMENT { schema = Turtle;  agents = TURTLE_1, TURTLE_2, TURTLE_3, TURTLE_4, TURTLE_5, TURTLE_6, TURTLE_7, TURTLE_8; }
ASSIGNMENT { schema = KinectBoard;  agents = JETSON_1, JETSON_2; }
